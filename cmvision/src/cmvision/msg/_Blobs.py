"""autogenerated by genmsg_py from Blobs.msg. Do not edit."""
import roslib.message
import struct

import cmvision.msg
import std_msgs.msg

class Blobs(roslib.message.Message):
  _md5sum = "9c46147119a8e441f5446a5432b95bda"
  _type = "cmvision/Blobs"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
uint32 image_width
uint32 image_height
uint32 blob_count
Blob[] blobs

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: cmvision/Blob
uint32 red
uint32 green
uint32 blue
uint32 area
uint32 x
uint32 y
uint32 left
uint32 right
uint32 top
uint32 bottom

"""
  __slots__ = ['header','image_width','image_height','blob_count','blobs']
  _slot_types = ['Header','uint32','uint32','uint32','cmvision/Blob[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,image_width,image_height,blob_count,blobs
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Blobs, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.image_width is None:
        self.image_width = 0
      if self.image_height is None:
        self.image_height = 0
      if self.blob_count is None:
        self.blob_count = 0
      if self.blobs is None:
        self.blobs = []
    else:
      self.header = std_msgs.msg._Header.Header()
      self.image_width = 0
      self.image_height = 0
      self.blob_count = 0
      self.blobs = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.image_width, _x.image_height, _x.blob_count))
      length = len(self.blobs)
      buff.write(_struct_I.pack(length))
      for val1 in self.blobs:
        _x = val1
        buff.write(_struct_10I.pack(_x.red, _x.green, _x.blue, _x.area, _x.x, _x.y, _x.left, _x.right, _x.top, _x.bottom))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_width, _x.image_height, _x.blob_count,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.blobs = []
      for i in xrange(0, length):
        val1 = cmvision.msg.Blob()
        _x = val1
        start = end
        end += 40
        (_x.red, _x.green, _x.blue, _x.area, _x.x, _x.y, _x.left, _x.right, _x.top, _x.bottom,) = _struct_10I.unpack(str[start:end])
        self.blobs.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.image_width, _x.image_height, _x.blob_count))
      length = len(self.blobs)
      buff.write(_struct_I.pack(length))
      for val1 in self.blobs:
        _x = val1
        buff.write(_struct_10I.pack(_x.red, _x.green, _x.blue, _x.area, _x.x, _x.y, _x.left, _x.right, _x.top, _x.bottom))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_width, _x.image_height, _x.blob_count,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.blobs = []
      for i in xrange(0, length):
        val1 = cmvision.msg.Blob()
        _x = val1
        start = end
        end += 40
        (_x.red, _x.green, _x.blue, _x.area, _x.x, _x.y, _x.left, _x.right, _x.top, _x.bottom,) = _struct_10I.unpack(str[start:end])
        self.blobs.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_10I = struct.Struct("<10I")
